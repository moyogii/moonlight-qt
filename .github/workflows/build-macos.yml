name: Build and Release macOS App

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        
    - name: Generate version and changelog
      id: version
      run: |
        # Generate incremental version using run number
        BASE_VERSION=$(cat app/version.txt | cut -d'.' -f1-2)
        BUILD_NUMBER=${{ github.run_number }}
        FULL_VERSION="${BASE_VERSION}.${BUILD_NUMBER}"
        
        # Update version.txt with the new version
        echo "$FULL_VERSION" > app/version.txt
        
        # Get the last release tag to compare against
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "### Commits since $LAST_TAG:" >> changelog.md
          echo "" >> changelog.md
          git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --reverse >> changelog.md
        else
          echo "### Recent commits:" >> changelog.md
          echo "" >> changelog.md
          git log --oneline -10 --pretty=format:"- %s (%h)" >> changelog.md
        fi
        
        echo "" >> changelog.md
        echo "Download the ad-hoc signed DMG below." >> changelog.md
        
        if [ -n "$LAST_TAG" ]; then
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...v${FULL_VERSION}" >> changelog.md
        else
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/v${FULL_VERSION}" >> changelog.md
        fi
        
        # Output variables for later steps
        echo "version=$FULL_VERSION" >> $GITHUB_OUTPUT
        echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        
        # Display version info
        echo "Generated version: $FULL_VERSION"
        echo "Changelog preview:"
        cat changelog.md
        
    - name: Install dependencies
      run: |
        brew install qt@6 create-dmg
        echo "/opt/homebrew/bin" >> $GITHUB_PATH
        echo "/opt/homebrew/opt/qt@6/bin" >> $GITHUB_PATH
        
    - name: Set up jellyfin-ffmpeg
      run: |
        mkdir -p $HOME/jellyfin/dev/{include,lib/pkgconfig}
        cd $HOME/jellyfin
        git clone --depth 1 --branch v7.1.1-7 https://github.com/jellyfin/jellyfin-ffmpeg.git source
        cp -r source/libav* dev/include/
        cat > dev/lib/pkgconfig/jellyfin-ffmpeg.pc << EOF
        prefix=$HOME/jellyfin/dev
        exec_prefix=\${prefix}
        libdir=\${exec_prefix}/lib
        includedir=\${prefix}/include

        Name: jellyfin-ffmpeg
        Description: Jellyfin FFmpeg libraries
        Version: 7.1.1-7
        Requires: 
        Libs: -L\${libdir} -lavcodec -lavformat -lavutil -lswscale -lavfilter -lavdevice -lswresample
        Cflags: -I\${includedir}
        EOF
        echo "PKG_CONFIG_PATH=$HOME/jellyfin/dev/lib/pkgconfig:\$PKG_CONFIG_PATH" >> $GITHUB_ENV
        
    - name: Build
      run: |
        qmake6 moonlight-qt.pro
        make release
        
    - name: Sign application
      run: |
        if [ ! -d "app/Moonlight.app" ]; then
          echo "Error: Moonlight.app not found"
          exit 1
        fi

        codesign --force --deep --sign - app/Moonlight.app
        
        xattr -cr app/Moonlight.app
        codesign --verify --verbose app/Moonlight.app
        
    - name: Create DMG
      run: |
        DMG_NAME="Moonlight-v${{ steps.version.outputs.version }}-macOS.dmg"
        create-dmg \
          --volname "Moonlight v${{ steps.version.outputs.version }}" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "Moonlight.app" 175 120 \
          --hide-extension "Moonlight.app" \
          --app-drop-link 425 120 \
          "$DMG_NAME" \
          "app/Moonlight.app"

        codesign --force --sign - "$DMG_NAME"
        xattr -cr "$DMG_NAME" || true
        
        # Create a generic symlink for easier artifact handling
        ln -sf "$DMG_NAME" "Moonlight.dmg"
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: Moonlight-v${{ steps.version.outputs.version }}-macOS
        path: Moonlight.dmg
        
    - name: Create Release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: "Moonlight v${{ steps.version.outputs.version }}"
        body_path: changelog.md
        files: |
          Moonlight-v${{ steps.version.outputs.version }}-macOS.dmg
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}